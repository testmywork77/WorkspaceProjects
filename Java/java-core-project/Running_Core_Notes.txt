Compiling and Executing Java Code:
Once the compiler produced the binary file that you need, you can execute this binary file, that will your program.

These two steps: compilation and execution require two specific pieces of software that are part of the Java Development Kit, also known as the JDK.

Java 18 and Java 17(https://www.oracle.com/java/technologies/downloads/#jdk17-windows):
	Java 17 LTS is the latest long-term support release for the Java SE platform. JDK 18 and JDK 17 binaries are free to use in production and free to redistribute, at no cost, under the Oracle No-Fee Terms and Conditions.

	JDK 18 will receive updates under these terms, until September 2022 when it will be superseded by JDK 19

	JDK 17 will receive updates under these terms, until at least September 2024.
	
Setting up a Java Development Kit(JDK) for Windows/x64
	> set JAVA_HOME=C:\Program Files\Java\jdk-17.0.3.1
	> echo %JAVA_HOME%
	> set PATH=%JAVA_HOME%\bin;%PATH%

	Do not close this command prompt. If you close it and open it again then you will need to create these two variables again.


Creating a First Java Class:
	//MyFirstClass.java
	package core;

	public class MyFirstClass {
		public static void main(String[] args){
			System.out.println("Hello World!");
		}
	}

Compiling a First Class:
	> java -version
	> javac MyFirstClass.java

	If the compiler remains silent and does not complain about anything: congratulations! It means that your Java code has been properly compiled. Checking the content of the directory again should show a new file in it: MyFirstClass.class

Run a First Class:
	> java MyFirstClass
	Hello World!

Running the Hello World Program as a Single File Application from Java 11:
	> java MyFirstClass.java
	Hello World!

***Launching Single-File Source-Code Programs: 
	Single-File Source-Code Program Execution
	In JDK 11, Java introduced the ability to launch a single-file source-code program with the java launcher, without first needing to explicitly compile the source code. This works by the java launcher automatically invoking the compiler and storing the compiled code in-memory. 

	*Executing Your First Single-File Source-Code Program
	public class HelloWorld {

		public static void main(String[] args) {
			System.out.println("Hello World!");
		}

	}

	$ java MyFirstClass.java
	Hello World!

	*Multiple Classes in Same File:	
		Multiple classes can be defined within the same source file if needed for encapsulation purposes.
		Ex:
		public class MultipleClassesInSameFile {
			public static void main(String[] args) {
		 
				System.out.println(GenerateMessage.generateMessage());
				System.out.println(AnotherMessage.generateAnotherMessage());
			}
		}
		 
		class GenerateMessage {
			static String generateMessage() {
				return "Here is one message";
			}
		}
		 
		class AnotherMessage {
			static String generateAnotherMessage() {
				return "Here is another message";
			}
		}
		
		When executed:
			$ java MultipleClassesInSameFile.java
		
		Will output:
			Here is one message
			Here is another message
			
Language Features:
	Local-Variable Type Inference -Java 10
	Local-Variable Syntax for Lambda Parameters -Java 11
	Switch Expressions -Java 14
	Records -Java 16
	Sealed Classes -Java 17
	Text Blocks -Java 15
	Pattern Matching for instanceof -Java 16
	Pattern Matching for Switch -Java 19