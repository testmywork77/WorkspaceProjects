Softwares & Tools: 
Node.js 18 LTS
JavaScript ES2022
Visual Studio Code 1.73.4

JavaScript is a dynamic interpreted scripting language that can be used to create web applications, backend services, games, mobile applications, and just about anything else you can imagine.

Installing the Prerequisites:
Installing Node.js for development
Installing Visual Studio Code
Reviewing JavaScript documentation online -Resource Referenced in this Course: https://tuck.cc/jsfun

JavaScript Engines:
V8 -Google Chrome, Microsoft Edge
JavaScript Core -Safari
SpiderMonkey -Firefox
Node.js -Server and Local Computer

Running Your First JavaScript Code:
1. Running JavaScript in the terminal
2. Configuring Visual Studio Code for Node.js
3. Executing JavaScript in Visual Studio Code with Node.js

Debugging JavaScript Code:
1. Configuring Visual Studio Code for debugging
2. Setting a breakpoint in a JavaScript file
3. Inspecting variables in a JavaScript file at a breakpoint

Syntax:
Syntax is a set of rules that defines how the collection of characters and symbols should be structured within a programming langauage.

Comments:
// This is a single-line comment

/*
This is a multi-line comment. You can
place more information in this syntax.
*/

Documentation and Configuration:
/**
* Joins the first and last names together.
*
* @param {string} firstName The first name
* @param {string} lastName The last name
* @return {string} The full name
*/
function getFullName(firstName, lastName) {
return `${firstName} ${lastName}`;
};

let lastName = "Tucker"; // eslint-disable-line

Variable Naming Rules:
• Names can contain letters, digits, and the $ and _ characters
• Cannot start a name with a digit
• Names are case sensitive

Variable Naming Best Practices:
• Variable names usually start with a lowercase letter
• Names leverage camel case

JavaScript Variables:
	// Assigning variable values
	let firstName = "David";
	let lastName = "Tucker";
	let numYearsEmployment = 6;
	let dateBirth = new Date("January 1, 1982");

	// Changing a variable created with let
	numYearsEmployment = 7;

	// Using const to create a constant
	const title = "VP of Engineering";
	title = "CTO"; // This would cause an error

	// Using var to define a variable
	var department = "Engineering"; // Not recommended

Garbage Collection: 
Garbage collection (GC) is a form of automatic memory management. The garbage collector attempts to reclaim memory
which was allocated by the program, but is no longer referenced;
such memory is called garbage.

Data Types:
Dynamic Typing:
JavaScript is a dynamic language with dynamic types. Variables inJavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types.

Memory in JavaScript - Stack and Heap

JavaScript Data Types - Primitive and Objects
	Primitives:
		In JavaScript, primitives are immutable, meaning they cannot be changed. These values have no methods or properties and their data is stored directly on the stack, since the engine knows exactly how much memory to allocate for that piece of data. Primitives are passed by value.
		
	Objects:
		In JavaScript, objects are mutable, meaning that their contents can be changed without creating a new object. Objects can contain a collection of properties. They are passed by reference and stored on the heap.
		
Understanding Data Types:
	Primitive: Boolean, Number, BigInt, String, Symbol, Null and Undefined
	Note: "All primitive types, except null and undefined, have their corresponding object wrapper types, which provide useful methods for working with the primitive values."
	Ex:
		Primitive Wrapper Methods:
		// String
		let name = "David";
		let upperCaseName = name.toUpperCase(); // DAVID

	Objects: Plain Objects, Functions, Collection Types(Array, Map, Set), Dates, Class Instances, Errors and Promises

Creating and Using Strings
Using Boolean Values
Storing Numberic Values

Number:
The JavaScript Number type is a double-precision 64-bit binary format IEEE 754 value, like double in Java or C#. This means it can represent fractional values, but there are some limits to the stored number's magnitude and precision.

Using a JavaScript Class:
// Using our new class
let day1 = new CalendarDay(2023, 0, 1); // user defined Class
console.log(day1.toString());
// Console returns "2023-1-1"

BigInt:
BigInt values represent numeric values which are too large to be represented by the number primitive... It is created by appending n to the end of an integer literal, or by calling the BigInt() function (without the new operator) and giving it an integer value or stringvalue.

Understanding Null and Undefined:
In JavaScript undefined and null both represent something without a value but for different use cases. If you define a variable but don't assign a value, the value is undefined. If you want something to not have a value, you can assign it to null.

JavaScript Objects:

Working with Dates:

Classes:
Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are unique to classes

Supported Class Features:
 1. Constructors
 2. Static initialization blocks
 3. Public methods and fields
 4. Static methods and fields
 5. Private methods and fields
 6. Inheritance
 
Creating a JavaScript Class:
	class CalendarDay {
		// private fields
		#month;
		#day;
		#year;
		
		// constructor
		constructor(month, day, year) {
			this.month = month;
			this.day = day;
			this.year = year;
		}
		
		// public method
		toString() {
			return `${this.year}-${this.month+1}-${this.day}`;
		}
	}
	
Using a JavaScript Class:
// Using our new class
let day1 = new CalendarDay(2023, 0, 1);
console.log(day1.toString()); // Console returns "2023-1-1"