Selenium Hybrid Framework:
(Python, Selenium, PyTest, Page Object Model, HTML Reports)

Built-in frameworks:
 _pytest, unittest, robotframework

Customized/User defined framework:
 _Datadriven framework, Keyword drvien framework, Hybrid driven framework

Phases:
1. Analyse applciation, Technology & Skill Set, Choose Test Cases-Smoke, Sanity, Regression, Tests to be/ not to be automate
2. Design & Implementation for framework
3. Execution
4. Maintanance(Version Control & CI/CD)

Admin Area
Front-End Area


FrontEnd: https://demo.nopcommerce.com/
email: testmywork77@gmail.com
pwd: test2468

BackEnd: https://admin-demo.nopcommerce.com
Admin email: admin@yourstore.com
Admin password: admin

https://github.com/pavanoltraining/nopCommerceProject

Step 1: Create new Project & Install required packages/plugins
Selenium: Selenium Libraries
pyTest: UnitTest Framework
pytest-html: HTML Reports
pytest-xdist: Run Tests Parallel
Openpyxl: MS Excel Support
Allure-pytest: To generate allure reports

Step 2: Create Folder Structure
 ProjectName
  _pageObjects(package)
  _testCases(package)
 _utilities (package)
 _TestData (Folder)
 _Configuration (Folder)
 _Logs (Folder)
 _Screenshots(Folder)
 _Reports
 _Run.bat

Step 3: Automating Login Test Case
 3.1 Create LoginPage Object Class under "pageObjects"
 3.2 Create LoginTest under "testCases"
 3.3 Create conftest.py under "testCases"

Step 4: Capture screenshot on failures
 4.1 Update Login Test with Screenshot under "testCases"

Step 5: Read common values from .ini file
 5.1 Add "config.ini" file in "Configurations" folder
 5.2 Create "readProperties.py" utility file under utlities package to read common data.
 5.3 Replace hard-coded values in Login test case

Step 6: Adding logs to test case
 6.1 Add customLogger.py under utilities package
 6.2 Add logs to Login test case

Step 7: Run tests on Desired Browser/Cross Browser/Parallel
 7.1 Update contest.py with required Fixtures which will accept command line argument(browser)
 7.2 Pass browser name as argument in command line

To run tests on desired browser
$ pytest -s -v testCases/test_login.py --browser chrome
$ pytest -s -v testCases/test_login.py --browser firefox

To run tests parallel
$ pytest -s -v -n=3 testCases/test_login.py --browser chrome
$ pytest -s -v -n=3 testCases/test_login.py --browser firefox

Step 8: Generate pytest HTML Reports
 8.1: Update conftest.py with pytest hooks
 8.2: To generate HTML report run below command
	pyest -s -v --html=Reorts\report.html testCases/test_login.py --browser chrome
